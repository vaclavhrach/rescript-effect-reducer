// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as $$Promise from "@ryyppy/rescript-promise/src/Promise.bs.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function execute(action, onSuccessOpt, onSuccessCallbackOpt, onErrorOpt, onErrorCallbackOpt, param, dispatch) {
  var onSuccess = onSuccessOpt !== undefined ? Caml_option.valFromOption(onSuccessOpt) : undefined;
  var onSuccessCallback = onSuccessCallbackOpt !== undefined ? Caml_option.valFromOption(onSuccessCallbackOpt) : undefined;
  var onError = onErrorOpt !== undefined ? Caml_option.valFromOption(onErrorOpt) : undefined;
  var onErrorCallback = onErrorCallbackOpt !== undefined ? Caml_option.valFromOption(onErrorCallbackOpt) : undefined;
  return $$Promise.$$catch(Curry._1(action, undefined).then(function (response) {
                  if (onSuccess !== undefined) {
                    Curry._1(dispatch, Curry._1(onSuccess, response));
                  }
                  if (onSuccessCallback !== undefined) {
                    Curry._1(onSuccessCallback, response);
                  }
                  return Promise.resolve({
                              TAG: /* Ok */0,
                              _0: undefined
                            });
                }), (function (err) {
                if (err.RE_EXN_ID === $$Promise.JsError) {
                  var message = err._1.message;
                  if (message !== undefined) {
                    if (onError !== undefined) {
                      Curry._1(dispatch, Curry._1(onError, message));
                    }
                    if (onErrorCallback !== undefined) {
                      Curry._1(onErrorCallback, message);
                    }
                    
                  }
                  
                }
                return Promise.resolve({
                            TAG: /* Error */1,
                            _0: undefined
                          });
              }));
}

function either(action, onSuccess, onError) {
  var partial_arg = Caml_option.some(onError);
  var partial_arg$1 = Caml_option.some(onSuccess);
  return function (param) {
    return execute(action, partial_arg$1, undefined, partial_arg, undefined, undefined, param);
  };
}

function perform(action, onSuccess, onErrorCallback) {
  var partial_arg = Caml_option.some(onErrorCallback);
  var partial_arg$1 = Caml_option.some(onSuccess);
  return function (param) {
    return execute(action, partial_arg$1, undefined, undefined, partial_arg, undefined, param);
  };
}

function attempt(action, onSuccessCallback, onError) {
  var partial_arg = Caml_option.some(onError);
  var partial_arg$1 = Caml_option.some(onSuccessCallback);
  return function (param) {
    return execute(action, undefined, partial_arg$1, partial_arg, undefined, undefined, param);
  };
}

export {
  execute ,
  either ,
  perform ,
  attempt ,
  
}
/* No side effect */
